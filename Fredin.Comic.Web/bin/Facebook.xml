<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Facebook</name>
  </assembly>
  <members>
    <member name="T:Facebook.DateTimeConvertor">
      <summary>
            Utilities to convert dates to and from unix time.
            </summary>
    </member>
    <member name="M:Facebook.DateTimeConvertor.ToUnixTime(System.DateTimeOffset)">
      <summary>
            Converts a DateTimeOffset object to unix time.
            </summary>
      <param name="dateTime">The date time.</param>
      <returns>The unix date time.</returns>
      <requires>dateTime &gt;= Epoch</requires>
    </member>
    <member name="M:Facebook.DateTimeConvertor.ToUnixTime(System.DateTime)">
      <summary>
            Converts a DateTime object to unix time.
            </summary>
      <param name="dateTime">The date time.</param>
      <returns>The unix date time.</returns>
      <requires>dateTime &gt;= Epoch</requires>
    </member>
    <member name="M:Facebook.DateTimeConvertor.FromUnixTime(System.String)">
      <summary>
            Converts a unix time string to a DateTime object.
            </summary>
      <param name="unixTime">The string representation of the unix time.</param>
      <returns>The DateTime object.</returns>
    </member>
    <member name="M:Facebook.DateTimeConvertor.FromUnixTime(System.Int64)">
      <summary>
            Converts a unix time string to a DateTime object.
            </summary>
      <param name="unixTime">The unix time.</param>
      <returns>The DateTime object.</returns>
    </member>
    <member name="P:Facebook.DateTimeConvertor.Epoch">
      <summary>
            Gets the epoch time.
            </summary>
      <value>The epoch time.</value>
    </member>
    <member name="T:Facebook.FacebookApiLimitException">
      <summary>
            Represents errors that occur as a result of problems with the OAuth access token.
            </summary>
    </member>
    <member name="T:Facebook.FacebookApiException">
      <summary>
            Represent erros that occur while calling a Facebook API.
            </summary>
    </member>
    <member name="M:Facebook.FacebookApiException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApiException" /> class.
            </summary>
    </member>
    <member name="M:Facebook.FacebookApiException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApiException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Facebook.FacebookApiException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApiException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="errorType">Type of the error.</param>
    </member>
    <member name="M:Facebook.FacebookApiException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApiException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Facebook.FacebookApiException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApiException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="errorType">Type of the error.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Facebook.FacebookApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApiException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="M:Facebook.FacebookApiException.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object">Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="P:Facebook.FacebookApiException.ErrorType">
      <summary>
            Gets or sets the type of the error.
            </summary>
      <value>The type of the error.</value>
    </member>
    <member name="P:Facebook.FacebookApiException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value />
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
      <getter>
        <ensures inheritedFrom="M:System.Exception.get_Message" inheritedFromTypeName="Exception">Contract.Result&lt;string&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:Facebook.FacebookApiLimitException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
    </member>
    <member name="M:Facebook.FacebookApiLimitException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Facebook.FacebookApiLimitException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="errorType">Type of the error.</param>
    </member>
    <member name="M:Facebook.FacebookApiLimitException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Facebook.FacebookApiLimitException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="message">The error message text.</param>
      <param name="errorType">Type of the facebook error.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Facebook.FacebookApiLimitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Facebook.FacebookAppBaseContracts">
      <summary>
            Represents the inheritable contracts for the <see cref="T:Facebook.FacebookAppBase" /> class.
            </summary>
    </member>
    <member name="T:Facebook.FacebookAppBase">
      <summary>
            Represents the core Facebook functionality.
            </summary>
      <invariant>_domainMaps != null</invariant>
      <invariant>_dropQueryParameters != null</invariant>
      <invariant>_readOnlyCalls != null</invariant>
    </member>
    <member name="M:Facebook.FacebookAppBase.InvarientObject">
      <summary>
            The code contracts invarient object method.
            </summary>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetLoginUrl">
      <summary>
            Get a Login URL for use with redirects. By default, 
            full page redirect is assumed.
            </summary>
      <returns>The URL for the login flow.</returns>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetLoginUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Get a Login URL for use with redirects. By default, full page redirect is
            assumed. If you are using the generated URL with a window.open() call in
            JavaScript, you can pass in display=popup as part of the parameters.
            The parameters:
                - next: the url to go to after a successful login
                - cancel_url: the url to go to after the user cancels
                - req_perms: comma separated list of requested extended perms
                - display: can be "page" (default, full page) or "popup"
            </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the login flow.</returns>
      <ensures>Contract.Result&lt;Uri&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetLogoutUrl">
      <summary>
            Get a Logout URL suitable for use with redirects.
            </summary>
      <returns>The URL for the logout flow.</returns>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetLogoutUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Get a Logout URL suitable for use with redirects.
            The parameters:
                - next: the url to go to after a successful logout
            </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the login flow.</returns>
      <ensures>Contract.Result&lt;Uri&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetLoginStatusUrl">
      <summary>
            Get a login status URL to fetch the status from facebook.
            </summary>
      <returns>The URL for the logout flow</returns>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetLoginStatusUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Get a login status URL to fetch the status from facebook.
            The parameters:
                - ok_session: the URL to go to if a session is found
                - no_session: the URL to go to if the user is not connected
                - no_user: the URL to go to if the user is not signed into facebook
            </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the logout flow</returns>
      <ensures>Contract.Result&lt;Uri&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.CleanUrl(System.Uri)">
      <summary>
            Cleans the URL or known Facebook querystring values.
            </summary>
      <param name="uri">The URI.</param>
      <returns />
      <requires>uri != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Api(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Make an API call.
            </summary>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Api(System.String)">
      <summary>
            Make an api call.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Api(System.String,Facebook.HttpMethod)">
      <summary>
            Make an api call.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="httpMethod">The http method for the request. Default is 'GET'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Api(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod)">
      <summary>
            Make an api call.
            </summary>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <param name="httpMethod">The http method for the request. Default is 'GET'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Api(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Make an api call.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Api(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod)">
      <summary>
            Make an api call.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <param name="httpMethod">The http method for the request. Default is 'GET'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Api(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,Facebook.HttpMethod)">
      <summary>
            Make an api call.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <param name="resultType">The type of the API request result to deserialize the response data.</param>
      <param name="httpMethod">The http method for the request. Default is 'GET'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Get(System.String)">
      <summary>
            Make an api call.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Get(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Make an api call.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Get(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Make an api call.
            </summary>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Get``1(System.String)">
      <summary>
            Make an api call.
            </summary>
      <typeparam name="T">The result of the API call.</typeparam>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>
            A dynamic object with the resulting data.
            </returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Get``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Make an api call.
            </summary>
      <typeparam name="T">The result of the API call.</typeparam>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <returns>
            A dynamic object with the resulting data.
            </returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Get``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Make an api call.
            </summary>
      <param name="parameters">Dynamic object of the request parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Post(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Make an api call.
            </summary>
      <param name="path">The path.</param>
      <param name="parameters">The parameters.</param>
      <returns />
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Post(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Make an api call.
            </summary>
      <param name="parameters">The parameters.</param>
      <returns />
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.ApiAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an API call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>callback != null</requires>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.ApiAsync(System.String,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.ApiAsync(System.String,Facebook.HttpMethod,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="httpMethod">The http method for the request. Default is 'GET'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>callback != null</requires>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.ApiAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.ApiAsync(Facebook.FacebookAsyncCallback,System.Object,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <param name="httpMethod">The http method for the request.</param>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.ApiAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <param name="httpMethod">The http method for the request.</param>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.ApiAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,Facebook.FacebookAsyncCallback{``0},System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <param name="httpMethod">The http method for the request.</param>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.DeleteAsync(System.String,Facebook.FacebookAsyncCallback)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.DeleteAsync(System.String,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync(System.String,Facebook.FacebookAsyncCallback)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync(System.String,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback)">
      <summary>
            Make an API call.
            </summary>
      <param name="parameters">object of url parameters.</param>
      <param name="callback">The async callback.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>callback != null</requires>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an API call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>callback != null</requires>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync``1(System.String,Facebook.FacebookAsyncCallback{``0})">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync``1(System.String,Facebook.FacebookAsyncCallback{``0},System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback{``0})">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback{``0},System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync``1(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback{``0})">
      <summary>
            Make an API call.
            </summary>
      <param name="parameters">object of url parameters.</param>
      <param name="callback">The async callback.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>callback != null</requires>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetAsync``1(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback{``0},System.Object)">
      <summary>
            Make an API call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>callback != null</requires>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.PostAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.PostAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.PostAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback)">
      <summary>
            Make an API call.
            </summary>
      <param name="parameters">object of url parameters.</param>
      <param name="callback">The async callback.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>callback != null</requires>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.PostAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make an API call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <requires>callback != null</requires>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.RestServer(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)">
      <summary>
            Invoke the old restserver.php endpoint.
            </summary>
      <param name="parameters">The parameters for the server call.</param>
      <param name="httpMethod">The http method for the request.</param>
      <returns>The decoded response object.</returns>
      <requires>parameters != null</requires>
      <requires>parameters.ContainsKey("method") &amp;&amp; !String.IsNullOrEmpty((string)parameters["method"])</requires>
      <ensures>Contract.Result&lt;object&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.Graph(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)">
      <summary>
            Invoke the Graph API.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="httpMethod">The http method for the request.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.OAuthRequest(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean)">
      <summary>
            Make a OAuth Request
            </summary>
      <param name="uri">The url to make the request.</param>
      <param name="parameters">The parameters of the request.</param>
      <param name="httpMethod">The http method for the request.</param>
      <returns>The decoded response object.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>uri != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.RestServerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Invoke the old restserver.php endpoint.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="parameters">The parameters for the server call.</param>
      <param name="httpMethod">The http method for the request.</param>
      <requires>callback != null</requires>
      <requires>parameters != null</requires>
      <requires>parameters.ContainsKey("method") &amp;&amp; !String.IsNullOrEmpty((string)parameters["method"])</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GraphAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Invoke the Graph API.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="httpMethod">The http method for the request.</param>
      <param name="parameters">object of url parameters.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.OAuthRequestAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make a OAuth Request
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="uri">The url to make the request.</param>
      <param name="parameters">The parameters of the request.</param>
      <param name="httpMethod">The http method for the request.</param>
      <returns>The decoded response object.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires>callback != null</requires>
      <requires>uri != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetApiUrl(System.String)">
      <summary>
            Build the URL for api given parameters.
            </summary>
      <param name="method">The method name.</param>
      <returns>The Url for the given parameters.</returns>
      <requires>!String.IsNullOrEmpty(method)</requires>
      <ensures>Contract.Result&lt;Uri&gt;() != default(Uri)</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetUrl(System.String)">
      <summary>
            Build the URL for given domain alias, path and parameters.
            </summary>
      <param name="name">The name of the domain (from the domain maps).</param>
      <returns>The string of the url for the given parameters.</returns>
      <requires>!String.IsNullOrEmpty(name)</requires>
      <ensures>Contract.Result&lt;Uri&gt;() != default(Uri)</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetUrl(System.String,System.String)">
      <summary>
            Build the URL for given domain alias, path and parameters.
            </summary>
      <param name="name">The name of the domain (from the domain maps).</param>
      <param name="path">Path (without a leading slash)</param>
      <returns>The string of the url for the given parameters.</returns>
      <requires>!String.IsNullOrEmpty(name)</requires>
      <ensures>Contract.Result&lt;Uri&gt;() != default(Uri)</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetUrl(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Build the URL for given domain alias, path and parameters.
            </summary>
      <param name="name">The name of the domain (from the domain maps).</param>
      <param name="parameters">Optional query parameters</param>
      <returns>The string of the url for the given parameters.</returns>
      <requires>!String.IsNullOrEmpty(name)</requires>
      <ensures>Contract.Result&lt;Uri&gt;() != default(Uri)</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.GetUrl(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Build the URL for given domain alias, path and parameters.
            </summary>
      <param name="name">The name of the domain (from the domain maps).</param>
      <param name="path">Optional path (without a leading slash)</param>
      <param name="parameters">Optional query parameters</param>
      <returns>The string of the url for the given parameters.</returns>
      <requires>!String.IsNullOrEmpty(name)</requires>
      <ensures>Contract.Result&lt;Uri&gt;() != default(Uri)</ensures>
    </member>
    <member name="M:Facebook.FacebookAppBase.ParseQueryParametersToDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Removes the querystring parameters from the path value and adds them
            to the parameters dictionary.
            </summary>
      <param name="path">The path to parse.</param>
      <param name="parameters">The dictionary</param>
      <returns />
      <requires>parameters != null</requires>
    </member>
    <member name="P:Facebook.FacebookAppBase.DropQueryParameters">
      <summary>
            Gets the list of query parameters that get automatically dropped when rebuilding the current URL.
            </summary>
      <getter>
        <ensures>Contract.Result&lt;ICollection&lt;string&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Facebook.FacebookAppBase.DomainMaps">
      <summary>
            Gets the aliases to Facebook domains.
            </summary>
      <getter>
        <ensures>Contract.Result&lt;Dictionary&lt;string, Uri&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Facebook.FacebookAppBase.AppId">
      <summary>
            Gets the Application ID.
            </summary>
    </member>
    <member name="P:Facebook.FacebookAppBase.AppSecret">
      <summary>
            Gets the Application API Secret.
            </summary>
    </member>
    <member name="P:Facebook.FacebookAppBase.Session">
      <summary>
            Gets or sets the active user session.
            </summary>
      <value>The session.</value>
    </member>
    <member name="P:Facebook.FacebookAppBase.CurrentUrl">
      <summary>
            Gets the current URL.
            </summary>
      <value>The current URL.</value>
    </member>
    <member name="P:Facebook.FacebookAppBase.UserId">
      <summary>
            Gets the user id.
            </summary>
      <value>The user id.</value>
    </member>
    <member name="P:Facebook.FacebookAppBase.AccessToken">
      <summary>
            Gets the access token.
            </summary>
      <value>The access token.</value>
    </member>
    <member name="P:Facebook.FacebookAppBase.SessionCookieName">
      <summary>
            Gets the name of the session cookie.
            </summary>
      <value>The name of the session cookie.</value>
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.GetLoginUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Get a Login URL for use with redirects. By default, full page redirect is
            assumed. If you are using the generated URL with a window.open() call in
            JavaScript, you can pass in display=popup as part of the parameters.
            The parameters:
            - next: the url to go to after a successful login
            - cancel_url: the url to go to after the user cancels
            - req_perms: comma separated list of requested extended perms
            - display: can be "page" (default, full page) or "popup"
            </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the login flow.</returns>
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.GetLogoutUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Get a Logout URL suitable for use with redirects.
            The parameters:
            - next: the url to go to after a successful logout
            </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the login flow.</returns>
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.GetLoginStatusUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Get a login status URL to fetch the status from facebook.
            The parameters:
            - ok_session: the URL to go to if a session is found
            - no_session: the URL to go to if the user is not connected
            - no_user: the URL to go to if the user is not signed into facebook
            </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the logout flow</returns>
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.RestServer(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)">
      <summary>
            Invoke the old restserver.php endpoint.
            </summary>
      <param name="parameters">The parameters for the server call.</param>
      <param name="httpMethod">The http method for the request.</param>
      <returns>The decoded response object.</returns>
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.Graph(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)">
      <summary>
            Invoke the Graph API.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <param name="httpMethod">The http method for the request.</param>
      <returns>
            A dynamic object with the resulting data.
            </returns>
      <exception cref="T:Facebook.FacebookApiException" />
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.OAuthRequest(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean)">
      <summary>
            Make a OAuth Request
            </summary>
      <param name="uri">The url to make the request.</param>
      <param name="parameters">The parameters of the request.</param>
      <param name="httpMethod">The http method for the request.</param>
      <returns>The decoded response object.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.RestServerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Invoke the old restserver.php endpoint.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="parameters">The parameters for the server call.</param>
      <param name="httpMethod">The http method for the request.</param>
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.GraphAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Invoke the Graph API.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">object of url parameters.</param>
      <param name="httpMethod">The http method for the request.</param>
      <exception cref="T:Facebook.FacebookApiException" />
    </member>
    <member name="M:Facebook.FacebookAppBaseContracts.OAuthRequestAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make a OAuth Request
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="uri">The url to make the request.</param>
      <param name="parameters">The parameters of the request.</param>
      <param name="httpMethod">The http method for the request.</param>
      <exception cref="T:Facebook.FacebookApiException" />
    </member>
    <member name="T:Facebook.FacebookAppExtensions">
      <summary>
            Extension methods that add non-standard funcationality to the FacebookAppBase object.
            </summary>
    </member>
    <member name="M:Facebook.FacebookAppExtensions.Query(Facebook.FacebookAppBase,System.String)">
      <summary>
            Executes a FQL query.
            </summary>
      <param name="app">The Facebook app.</param>
      <param name="fql">The FQL query.</param>
      <returns>The FQL query result.</returns>
      <requires>app != null</requires>
      <requires>!String.IsNullOrEmpty(fql)</requires>
    </member>
    <member name="M:Facebook.FacebookAppExtensions.Query(Facebook.FacebookAppBase,System.String[])">
      <summary>
            Executes a FQL multiquery.
            </summary>
      <param name="app">The Facebook app.</param>
      <param name="fql">The FQL queries.</param>
      <returns>A collection of the FQL query results.</returns>
      <requires>app != null</requires>
      <requires>fql != null</requires>
    </member>
    <member name="M:Facebook.FacebookAppExtensions.Fql(Facebook.FacebookAppBase,System.String)">
      <summary>
            Executes a FQL query.
            </summary>
      <param name="app">The Facebook app.</param>
      <param name="query">The FQL query.</param>
      <returns>The FQL query result.</returns>
      <requires>app != null</requires>
      <requires>!String.IsNullOrEmpty(query)</requires>
    </member>
    <member name="M:Facebook.FacebookAppExtensions.Fql(Facebook.FacebookAppBase,System.String[])">
      <summary>
            Executes a FQL multiquery.
            </summary>
      <param name="app">The Facebook app.</param>
      <param name="queries">The FQL queries.</param>
      <returns>A collection of the FQL query results.</returns>
      <requires>app != null</requires>
      <requires>queries != null</requires>
    </member>
    <member name="T:Facebook.FacebookAsyncCallback">
      <summary>
            Represents the method that handles the post-call result.
            </summary>
      <param name="asyncResult">The Facebook asynchronous result.</param>
    </member>
    <member name="T:Facebook.FacebookAsyncCallback`1">
      <summary>
            Represents the method that handles the post-call result.
            </summary>
      <param name="asyncResult">The Facebook asynchronous result.</param>
    </member>
    <member name="T:Facebook.FacebookAsyncResult">
      <summary>
            Represents the status of an asynchronous Facebook api call.
            </summary>
    </member>
    <member name="F:Facebook.FacebookAsyncResult.result">
      <summary>
            The result of the asynchronous operation.
            </summary>
    </member>
    <member name="F:Facebook.FacebookAsyncResult.asyncState">
      <summary>
            The user-defined object that qualifies or contains information about an asynchronous operation
            </summary>
    </member>
    <member name="F:Facebook.FacebookAsyncResult.asyncWaitHandle">
      <summary>
            A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.
            </summary>
    </member>
    <member name="F:Facebook.FacebookAsyncResult.completedSynchronously">
      <summary>
            A value that indicates whether the asynchronous operation completed synchronously.
            </summary>
    </member>
    <member name="F:Facebook.FacebookAsyncResult.isCompleted">
      <summary>
            A value that indicates whether the asynchronous operation has completed.
            </summary>
    </member>
    <member name="F:Facebook.FacebookAsyncResult.error">
      <summary>
            The error that occurred processing this api call.
            </summary>
    </member>
    <member name="M:Facebook.FacebookAsyncResult.#ctor(System.Object,System.Object,System.Threading.WaitHandle,System.Boolean,System.Boolean,Facebook.FacebookApiException)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookAsyncResult" /> class.
            </summary>
      <param name="result">The result.</param>
      <param name="asyncState">State of the async.</param>
      <param name="asyncWaitHandle">The async wait handle.</param>
      <param name="completedSynchronously">if set to <c>true</c> [completed synchronously].</param>
      <param name="isCompleted">if set to <c>true</c> [is completed].</param>
      <param name="error">The error.</param>
    </member>
    <member name="P:Facebook.FacebookAsyncResult.Error">
      <summary>
            Gets the error that occurred processing this api call.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Facebook.FacebookAsyncResult.Result">
      <summary>
            Gets the result of an asynchronous operation.
            </summary>
      <value>The result.</value>
    </member>
    <member name="P:Facebook.FacebookAsyncResult.AsyncState">
      <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
      <value />
      <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
    </member>
    <member name="P:Facebook.FacebookAsyncResult.AsyncWaitHandle">
      <summary>
            Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.
            </summary>
      <value />
      <returns>A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</returns>
    </member>
    <member name="P:Facebook.FacebookAsyncResult.CompletedSynchronously">
      <summary>
            Gets a value indicating whether the asynchronous operation completed synchronously.
            </summary>
      <value />
      <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
    </member>
    <member name="P:Facebook.FacebookAsyncResult.IsCompleted">
      <summary>
            Gets a value indicating whether the asynchronous operation has completed.
            </summary>
      <value />
      <returns>true if the operation is complete; otherwise, false.</returns>
    </member>
    <member name="M:Facebook.FacebookAsyncResult`1.#ctor(System.Object,System.Object,System.Threading.WaitHandle,System.Boolean,System.Boolean,Facebook.FacebookApiException)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookAsyncResult" /> class.
            </summary>
      <param name="result">The result.</param>
      <param name="asyncState">State of the async.</param>
      <param name="asyncWaitHandle">The async wait handle.</param>
      <param name="completedSynchronously">if set to <c>true</c> [completed synchronously].</param>
      <param name="isCompleted">if set to <c>true</c> [is completed].</param>
      <param name="error">The error.</param>
    </member>
    <member name="P:Facebook.FacebookAsyncResult`1.Result">
      <summary>
            Gets the result of an asynchronous operation.
            </summary>
      <value>The result.</value>
    </member>
    <member name="T:Facebook.FacebookApp">
      <summary>
            Provides access to the Facebook Platform.
            </summary>
      <invariant>this.maxRetries &gt;= 0</invariant>
      <invariant>this.retryDelay &gt;= 0</invariant>
      <invariant>retryErrorTypes != null</invariant>
    </member>
    <member name="F:Facebook.FacebookApp.Prefix">
      <summary>
            The multi-part form prefix characters.
            </summary>
    </member>
    <member name="F:Facebook.FacebookApp.NewLine">
      <summary>
            The multi-part form new line characters.
            </summary>
    </member>
    <member name="F:Facebook.FacebookApp.retryErrorTypes">
      <summary>
            The collection of Facebook error types that should be retried.
            </summary>
    </member>
    <member name="F:Facebook.FacebookApp.maxRetries">
      <summary>
            How many times to retry a command if an error occurs until we give up.
            </summary>
    </member>
    <member name="F:Facebook.FacebookApp.retryDelay">
      <summary>
            How long in milliseconds to wait before retrying.
            </summary>
    </member>
    <member name="F:Facebook.FacebookApp.session">
      <summary>
            The current Facebook session.
            </summary>
    </member>
    <member name="F:Facebook.FacebookApp.signedRequest">
      <summary>
            The current Facebook signed request.
            </summary>
    </member>
    <member name="F:Facebook.FacebookApp.request">
      <summary>
            The current HTTP request.
            </summary>
    </member>
    <member name="F:Facebook.FacebookApp.response">
      <summary>
            The current HTTP response.
            </summary>
    </member>
    <member name="M:Facebook.FacebookApp.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApp" />
            class with values stored in the application configuration file
            or with only the default values if the configuration
            file does not have the values set.
            </summary>
    </member>
    <member name="M:Facebook.FacebookApp.#ctor(Facebook.IFacebookSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApp" />
            class with values provided. Does not require configuration
            file to be set.
            </summary>
      <param name="settings">The facebook settings for the application.</param>
      <requires>settings != null</requires>
    </member>
    <member name="M:Facebook.FacebookApp.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookApp" />
            class with only an access_token set. From this state
            sessions will not be accessable.
            </summary>
      <param name="accessToken">The Facebook access token.</param>
      <requires>!String.IsNullOrEmpty(accessToken)</requires>
    </member>
    <member name="M:Facebook.FacebookApp.GetLoginUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <para>Get a Login URL for use with redirects. By default, full page redirect is
            assumed. If you are using the generated URL with a window.open() call in
            JavaScript, you can pass in display=popup as part of the parameters.</para>
        <para>The parameters:</para>
        <para>   - next: the url to go to after a successful login</para>
        <para>   - cancel_url: the url to go to after the user cancels</para>
        <para>   - req_perms: comma separated list of requested extended perms</para>
        <para>   - display: can be "page" (default, full page) or "popup"</para>
      </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the login flow.</returns>
      <ensures inheritedFrom="M:Facebook.FacebookAppBase.GetLoginUrl(System.Collections.Generic.IDictionary{System.String,System.Object})" inheritedFromTypeName="FacebookAppBase">Contract.Result&lt;Uri&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookApp.GetLogoutUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <para>Get a Logout URL suitable for use with redirects.</para>
        <para>The parameters:</para>
        <para>   - next: the url to go to after a successful logout</para>
      </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the login flow.</returns>
      <ensures inheritedFrom="M:Facebook.FacebookAppBase.GetLogoutUrl(System.Collections.Generic.IDictionary{System.String,System.Object})" inheritedFromTypeName="FacebookAppBase">Contract.Result&lt;Uri&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookApp.GetLoginStatusUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <para>Get a Logout URL suitable for use with redirects.</para>
        <para>The parameters:</para>
        <para>    - next: the url to go to after a successful logout</para>
      </summary>
      <param name="parameters">Custom url parameters.</param>
      <returns>The URL for the login flow.</returns>
      <ensures inheritedFrom="M:Facebook.FacebookAppBase.GetLoginStatusUrl(System.Collections.Generic.IDictionary{System.String,System.Object})" inheritedFromTypeName="FacebookAppBase">Contract.Result&lt;Uri&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookApp.RestServer(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)">
      <summary>
            Invoke the old restserver.php endpoint.
            </summary>
      <param name="parameters">The parameters of the method call.</param>
      <param name="httpMethod">The http method for the request. Default is 'GET'.</param>
      <returns>The decoded response object.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires inheritedFrom="M:Facebook.FacebookAppBase.RestServer(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)" inheritedFromTypeName="FacebookAppBase">parameters != null</requires>
      <requires inheritedFrom="M:Facebook.FacebookAppBase.RestServer(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)" inheritedFromTypeName="FacebookAppBase">parameters.ContainsKey("method") &amp;&amp; !String.IsNullOrEmpty((string)parameters["method"])</requires>
      <ensures inheritedFrom="M:Facebook.FacebookAppBase.RestServer(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)" inheritedFromTypeName="FacebookAppBase">Contract.Result&lt;object&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookApp.Graph(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)">
      <summary>
            Make a graph api call.
            </summary>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">JsonObject of url parameters.</param>
      <param name="httpMethod">The http method for the request.</param>
      <returns>A dynamic object with the resulting data.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires inheritedFrom="M:Facebook.FacebookAppBase.Graph(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type)" inheritedFromTypeName="FacebookAppBase">!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookApp.OAuthRequest(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean)">
      <summary>
            Make a OAuth Request
            </summary>
      <param name="uri">The url to make the request.</param>
      <param name="parameters">The parameters of the request.</param>
      <param name="httpMethod">The http method for the request.</param>
      <returns>The decoded response object.</returns>
      <requires inheritedFrom="M:Facebook.FacebookAppBase.OAuthRequest(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean)" inheritedFromTypeName="FacebookAppBase">uri != null</requires>
    </member>
    <member name="M:Facebook.FacebookApp.RestServerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Invoke the old restserver.php endpoint.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="parameters">The parameters of the method call.</param>
      <param name="httpMethod">The http method for the request.</param>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires inheritedFrom="M:Facebook.FacebookAppBase.RestServerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)" inheritedFromTypeName="FacebookAppBase">callback != null</requires>
      <requires inheritedFrom="M:Facebook.FacebookAppBase.RestServerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)" inheritedFromTypeName="FacebookAppBase">parameters != null</requires>
      <requires inheritedFrom="M:Facebook.FacebookAppBase.RestServerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)" inheritedFromTypeName="FacebookAppBase">parameters.ContainsKey("method") &amp;&amp; !String.IsNullOrEmpty((string)parameters["method"])</requires>
    </member>
    <member name="M:Facebook.FacebookApp.GraphAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make a graph api call.
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="path">The path of the url to call such as 'me/friends'.</param>
      <param name="parameters">JsonObject of url parameters.</param>
      <param name="httpMethod">The http method for the request.</param>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires inheritedFrom="M:Facebook.FacebookAppBase.GraphAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)" inheritedFromTypeName="FacebookAppBase">callback != null</requires>
      <requires inheritedFrom="M:Facebook.FacebookAppBase.GraphAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,Facebook.FacebookAsyncCallback,System.Object)" inheritedFromTypeName="FacebookAppBase">!(String.IsNullOrEmpty(path) &amp;&amp; parameters == null)</requires>
    </member>
    <member name="M:Facebook.FacebookApp.OAuthRequestAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make a OAuth Request
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="uri">The url to make the request.</param>
      <param name="parameters">The parameters of the request.</param>
      <param name="httpMethod">The http method of the request.</param>
      <exception cref="T:Facebook.FacebookApiException" />
      <requires inheritedFrom="M:Facebook.FacebookAppBase.OAuthRequestAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean,Facebook.FacebookAsyncCallback,System.Object)" inheritedFromTypeName="FacebookAppBase">callback != null</requires>
      <requires inheritedFrom="M:Facebook.FacebookAppBase.OAuthRequestAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.Type,System.Boolean,Facebook.FacebookAsyncCallback,System.Object)" inheritedFromTypeName="FacebookAppBase">uri != null</requires>
    </member>
    <member name="M:Facebook.FacebookApp.WithMirrorRetry(System.Action)">
      <summary>
            This method invokes the supplied delegate with retry logic wrapped around it.  No values are returned.  If the delegate raises
            recoverable Facebook server or client errors, then the supplied delegate is reinvoked after a certain amount of delay
            until the retry limit is exceeded, at which point the exception is rethrown. Other exceptions are not caught and will
            be visible to callers.
            </summary>
      <param name="body">The delegate to invoke within the retry code.</param>
      <requires>body != null</requires>
    </member>
    <member name="M:Facebook.FacebookApp.WithMirrorRetry``1(System.Func{``0})">
      <summary>
            This method invokes the supplied delegate with retry logic wrapped around it and returns the value of the delegate.
            If the delegate raises recoverable Facebook server or client errors, then the supplied delegate is reinvoked after
            a certain amount of delay until the retry limit is exceeded, at which point the exception is rethrown. Other
            exceptions are not caught and will be visible to callers.
            </summary>
      <typeparam name="TReturn">The type of object being returned</typeparam>
      <param name="body">The delegate to invoke within the retry logic which will produce the value to return</param>
      <returns>The value the delegate returns</returns>
      <requires>body != null</requires>
    </member>
    <member name="M:Facebook.FacebookApp.BuildRequestData(System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.HttpMethod,System.String,System.Uri@,System.String@)">
      <summary>
            Builds the request post data and request uri based on the given parameters.
            </summary>
      <param name="uri">The request uri.</param>
      <param name="parameters">The request parameters.</param>
      <param name="httpMethod">The http method.</param>
      <param name="accessToken">The access token.</param>
      <param name="requestUrl">The outputed request uri.</param>
      <param name="contentType">The request content type.</param>
      <returns>The request post data.</returns>
      <requires>uri != null</requires>
      <requires>parameters != null</requires>
    </member>
    <member name="M:Facebook.FacebookApp.BuildMediaObjectPostData(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
      <summary>
            Builds the request post data if the request contains a media object
            such as an image or video to upload.
            </summary>
      <param name="parameters">The request parameters.</param>
      <param name="boundary">The multipart form request boundary.</param>
      <returns>The request post data.</returns>
    </member>
    <member name="M:Facebook.FacebookApp.MakeRequest(Facebook.HttpMethod,System.Uri,System.Byte[],System.String,System.Type,System.Boolean)">
      <summary>
            Make the API Request
            </summary>
      <param name="httpMethod">The http method to use. GET, POST, DELETE.</param>
      <param name="requestUrl">The uri of the request.</param>
      <param name="postData">The request data.</param>
      <param name="contentType">The request content type.</param>
      <returns>The decoded response object.</returns>
      <exception cref="T:Facebook.FacebookApiException" />
    </member>
    <member name="M:Facebook.FacebookApp.MakeRequestAsync(Facebook.HttpMethod,System.Uri,System.Byte[],System.String,System.Type,System.Boolean,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Make the API Request
            </summary>
      <param name="callback">The async callback.</param>
      <param name="state">The async state.</param>
      <param name="httpMethod">The http method to use. GET, POST, DELETE.</param>
      <param name="requestUrl">The uri of the request.</param>
      <param name="postData">The request data.</param>
      <param name="contentType">The request content type.</param>
      <exception cref="T:Facebook.FacebookApiException" />
    </member>
    <member name="M:Facebook.FacebookApp.RequestCallback(System.IAsyncResult,System.Byte[],Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            The asynchronous web request callback.
            </summary>
      <param name="asyncResult">The asynchronous result.</param>
      <param name="postData">The post data.</param>
      <param name="callback">The callback method.</param>
      <param name="state">The asynchronous state.</param>
    </member>
    <member name="M:Facebook.FacebookApp.ResponseCallback(System.IAsyncResult,Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            The asynchronous web response callback.
            </summary>
      <param name="asyncResult">The asynchronous result.</param>
      <param name="callback">The callback method.</param>
      <param name="state">The asynchronous state.</param>
    </member>
    <member name="M:Facebook.FacebookApp.AddRestParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Adds the standard REST requset parameters.
            </summary>
      <param name="parameters">The parameters object.</param>
    </member>
    <member name="M:Facebook.FacebookApp.ApplySettings(Facebook.IFacebookSettings)">
      <summary>
            Applies the Facebook settings to the
            properties of this object.
            </summary>
      <param name="settings">The Facebook settings.</param>
      <requires>settings != null</requires>
    </member>
    <member name="M:Facebook.FacebookApp.GetGraphRequestUri(System.String)">
      <summary>
            Gets the graph request url in the proper format.
            </summary>
      <param name="path">The request url path.</param>
      <returns>The fully qualified uri for the request.</returns>
    </member>
    <member name="M:Facebook.FacebookApp.InvarientObject">
      <summary>
            The code contracts invarient object method.
            </summary>
    </member>
    <member name="P:Facebook.FacebookApp.MaxRetries">
      <summary>
            Gets or sets the maximum number of times to retry an api
            call after experiencing a recoverable exception.
            </summary>
      <value>The max retries.</value>
      <setter>
        <requires>value &gt;= 0</requires>
      </setter>
    </member>
    <member name="P:Facebook.FacebookApp.RetryDelay">
      <summary>
            Gets or sets the value in seconds to wait before retrying, with exponential roll off.
            </summary>
      <value>The retry delay.</value>
      <setter>
        <requires>value &gt;= 0</requires>
      </setter>
    </member>
    <member name="P:Facebook.FacebookApp.SignedRequest">
      <summary>
            Gets the signed request.
            </summary>
      <value>The signed request.</value>
    </member>
    <member name="P:Facebook.FacebookApp.Session">
      <summary>
            Gets or sets the active user session.
            </summary>
      <value>The session.</value>
    </member>
    <member name="P:Facebook.FacebookApp.RetryErrorTypes">
      <summary>
            Gets a collection of Facebook error types that
            should be retried in the event of a failure.
            </summary>
    </member>
    <member name="P:Facebook.FacebookApp.Request">
      <summary>
            Gets or sets the HTTP request.
            </summary>
      <value>The request.</value>
      <setter>
        <requires>value != null</requires>
      </setter>
    </member>
    <member name="P:Facebook.FacebookApp.Response">
      <summary>
            Gets or sets the current HTTP response.
            </summary>
      <value>The response.</value>
      <setter>
        <requires>value != null</requires>
      </setter>
    </member>
    <member name="P:Facebook.FacebookApp.CurrentUrl">
      <summary>
            Gets the Current URL, stripping it of known FB parameters that should not persist.
            </summary>
    </member>
    <member name="T:Facebook.FacebookConfigurationSection">
      <summary>
            Represents the Facebook section in a configuration file.
            </summary>
    </member>
    <member name="T:Facebook.IFacebookSettings">
      <summary>
            Represents the settings of a Facebook application.
            </summary>
    </member>
    <member name="P:Facebook.IFacebookSettings.AppSecret">
      <summary>
            Gets or sets the App secret.
            </summary>
      <value>The App secret.</value>
    </member>
    <member name="P:Facebook.IFacebookSettings.AppId">
      <summary>
            Gets or sets the app id.
            </summary>
      <value>The app id.</value>
    </member>
    <member name="P:Facebook.IFacebookSettings.MaxRetries">
      <summary>
            Gets or sets the max retries.
            </summary>
      <value>The max retries.</value>
    </member>
    <member name="P:Facebook.IFacebookSettings.RetryDelay">
      <summary>
            Gets or sets the retry delay.
            </summary>
      <value>The retry delay.</value>
    </member>
    <member name="P:Facebook.FacebookConfigurationSection.AppSecret">
      <summary>
            Gets or sets the API secret.
            </summary>
      <value>The API secret.</value>
    </member>
    <member name="P:Facebook.FacebookConfigurationSection.AppId">
      <summary>
            Gets or sets the app id.
            </summary>
      <value>The app id.</value>
    </member>
    <member name="P:Facebook.FacebookConfigurationSection.MaxRetries">
      <summary>
            Gets or sets the max retries.
            </summary>
      <value>The max retries.</value>
    </member>
    <member name="P:Facebook.FacebookConfigurationSection.RetryDelay">
      <summary>
            Gets or sets the retry delay.
            </summary>
      <value>The retry delay.</value>
    </member>
    <member name="T:Facebook.FacebookMediaObject">
      <summary>
            Represents a media object such as a photo or video.
            </summary>
    </member>
    <member name="F:Facebook.FacebookMediaObject.value">
      <summary>
            The value of the media object.
            </summary>
    </member>
    <member name="M:Facebook.FacebookMediaObject.SetValue(System.Byte[])">
      <summary>
            Sets the value of the media object.
            </summary>
      <param name="value">The media object value.</param>
    </member>
    <member name="M:Facebook.FacebookMediaObject.GetValue">
      <summary>
            Gets the value of the media object.
            </summary>
      <returns>The value of the media object.</returns>
    </member>
    <member name="P:Facebook.FacebookMediaObject.ContentType">
      <summary>
            Gets or sets the type of the content.
            </summary>
      <value>The type of the content.</value>
    </member>
    <member name="P:Facebook.FacebookMediaObject.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
      <value>The name of the file.</value>
    </member>
    <member name="T:Facebook.FacebookOAuthException">
      <summary>
            Represents errors that occur as a result of problems with the OAuth access token.
            </summary>
    </member>
    <member name="M:Facebook.FacebookOAuthException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
    </member>
    <member name="M:Facebook.FacebookOAuthException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Facebook.FacebookOAuthException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="errorType">Type of the error.</param>
    </member>
    <member name="M:Facebook.FacebookOAuthException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Facebook.FacebookOAuthException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="message">The error message text.</param>
      <param name="errorType">Type of the facebook error.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Facebook.FacebookOAuthException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookOAuthException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Facebook.FacebookSignedRequest">
      <summary>
            Rerpesents a Facebook signed request.
            </summary>
    </member>
    <member name="M:Facebook.FacebookSignedRequest.Parse(System.String,System.String)">
      <summary>
            Parses the signed request string.
            </summary>
      <param name="value">The encoded signed request value.</param>
      <returns>The valid signed request.</returns>
      <requires>!String.IsNullOrEmpty(value)</requires>
      <requires>value.Contains(".")</requires>
    </member>
    <member name="M:Facebook.FacebookSignedRequest.Base64UrlDecode(System.String)">
      <summary>
            Converts the base 64 url encoded string to standard base 64 encoding.
            </summary>
      <param name="encodedValue">The encoded value.</param>
      <returns>The base 64 string.</returns>
      <requires>!String.IsNullOrEmpty(encodedValue)</requires>
    </member>
    <member name="P:Facebook.FacebookSignedRequest.UserId">
      <summary>
            Gets or sets the user id.
            </summary>
      <value>The user id.</value>
    </member>
    <member name="P:Facebook.FacebookSignedRequest.AccessToken">
      <summary>
            Gets or sets the access token.
            </summary>
      <value>The access token.</value>
    </member>
    <member name="P:Facebook.FacebookSignedRequest.Expires">
      <summary>
            Gets or sets the expires.
            </summary>
      <value>The expires.</value>
    </member>
    <member name="P:Facebook.FacebookSignedRequest.IssuedAt">
      <summary>
            Gets or sets the expires.
            </summary>
      <value>The expires.</value>
    </member>
    <member name="P:Facebook.FacebookSignedRequest.ProfileId">
      <summary>
            Gets or sets the profile id.
            </summary>
      <value>The profile id.</value>
    </member>
    <member name="P:Facebook.FacebookSignedRequest.Algorithm">
      <summary>
            Gets or sets the algorithm.
            </summary>
      <value>The algorithm.</value>
    </member>
    <member name="T:Facebook.ExceptionFactory">
      <summary>
            A utility for generating facebook exceptions.
            </summary>
    </member>
    <member name="M:Facebook.ExceptionFactory.GetRestException(System.Object)">
      <summary>
            Gets the rest exception if possible.
            </summary>
      <param name="result">The web request result object to check for exception information.</param>
      <returns>The Facebook API exception or null.</returns>
    </member>
    <member name="M:Facebook.ExceptionFactory.GetGraphException(System.Net.WebException)">
      <summary>
            Gets the graph exception if possible.
            </summary>
      <param name="exception">The web exception.</param>
      <returns>A Facebook API exception or null.</returns>
      <requires>exception != null</requires>
    </member>
    <member name="P:Facebook.ExceptionFactory.PathOrParametersRequired">
      <summary>
            Gets the path or parameters required exception.
            </summary>
      <value>The path or parameters required exception.</value>
    </member>
    <member name="P:Facebook.ExceptionFactory.MethodRequiredForRestCall">
      <summary>
            Gets the method required for rest call exception.
            </summary>
      <value>The method required for rest call exception.</value>
    </member>
    <member name="P:Facebook.ExceptionFactory.CannotIncludeMultipleMediaObjects">
      <summary>
            Gets the cannot include multiple media objects exception.
            </summary>
      <value>The cannot include multiple media objects exception.</value>
    </member>
    <member name="P:Facebook.ExceptionFactory.MediaObjectMustHavePropertiesSet">
      <summary>
            Gets the media object must have properties set exception.
            </summary>
      <value>The media object must have properties set exception.</value>
    </member>
    <member name="P:Facebook.ExceptionFactory.InvalidCookie">
      <summary>
            Gets the invalid cookie exception.
            </summary>
      <value>The invalid cookie exception.</value>
    </member>
    <member name="T:Facebook.FacebookOAuthClientAuthorizer">
      <summary>
            Represents the Facebook OAuth Helpers
            </summary>
    </member>
    <member name="T:Facebook.IOAuthClientAuthorizer">
      <summary>
            Represents the OAuth helpers.
            </summary>
    </member>
    <member name="M:Facebook.IOAuthClientAuthorizer.ExchangeCodeForAccessToken(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Gets the access token by exchanging the code.
            </summary>
      <param name="code">
            The code to exchange.
            </param>
      <param name="parameters">
            The parameters.
            </param>
      <returns>
            Returns the access token or expires if exists.
            </returns>
    </member>
    <member name="M:Facebook.IOAuthClientAuthorizer.ExchangeCodeForAccessTokenAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Gets the access token by exchanging the code.
            </summary>
      <param name="code">
            The code to exchange.
            </param>
      <param name="parameters">
            The parameters.
            </param>
      <param name="callback">
            The callback.
            </param>
      <param name="state">
            The state.
            </param>
    </member>
    <member name="M:Facebook.IOAuthClientAuthorizer.ExchangeCodeForAccessTokenAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback)">
      <summary>
            Gets the access token by exchanging the code.
            </summary>
      <param name="code">
            The code to exchange.
            </param>
      <param name="parameters">
            The parameters.
            </param>
      <param name="callback">
            The callback.
            </param>
    </member>
    <member name="P:Facebook.IOAuthClientAuthorizer.ClientId">
      <summary>
            Gets the client id.
            </summary>
    </member>
    <member name="P:Facebook.IOAuthClientAuthorizer.ClientSecret">
      <summary>
            Gets the client secret.
            </summary>
    </member>
    <member name="P:Facebook.IOAuthClientAuthorizer.RedirectUri">
      <summary>
            Gets the redirect uri.
            </summary>
    </member>
    <member name="M:Facebook.FacebookOAuthClientAuthorizer.ExchangeCodeForAccessToken(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Gets the access token by exchanging the code.
            </summary>
      <param name="code">
            The code to exchange.
            </param>
      <param name="parameters">
            The parameters.
            </param>
      <returns>
            Returns the access token or expires if exists.
            </returns>
      <requires>!string.IsNullOrEmpty(code)</requires>
    </member>
    <member name="M:Facebook.FacebookOAuthClientAuthorizer.ExchangeCodeForAccessTokenAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback,System.Object)">
      <summary>
            Gets the access token by exchanging the code.
            </summary>
      <param name="code">
            The code to exchange.
            </param>
      <param name="parameters">
            The parameters.
            </param>
      <param name="callback">
            The callback.
            </param>
      <param name="state">
            The state.
            </param>
      <requires>!string.IsNullOrEmpty(code)</requires>
    </member>
    <member name="M:Facebook.FacebookOAuthClientAuthorizer.ExchangeCodeForAccessTokenAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Facebook.FacebookAsyncCallback)">
      <summary>
            Gets the access token by exchanging the code.
            </summary>
      <param name="code">
            The code to exchange.
            </param>
      <param name="parameters">
            The parameters.
            </param>
      <param name="callback">
            The callback.
            </param>
    </member>
    <member name="P:Facebook.FacebookOAuthClientAuthorizer.ClientId">
      <summary>
            Gets or sets the client id.
            </summary>
    </member>
    <member name="P:Facebook.FacebookOAuthClientAuthorizer.ClientSecret">
      <summary>
            Gets or sets the client secret.
            </summary>
    </member>
    <member name="P:Facebook.FacebookOAuthClientAuthorizer.RedirectUri">
      <summary>
            Gets or sets the redirect uri.
            </summary>
    </member>
    <member name="T:Facebook.JsonObject">
      <summary>
            Represents a JSON object.
            </summary>
      <invariant>members != null</invariant>
    </member>
    <member name="F:Facebook.JsonObject.members">
      <summary>
            The internal member dictionary.
            </summary>
    </member>
    <member name="M:Facebook.JsonObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.JsonObject" /> class.
            </summary>
    </member>
    <member name="M:Facebook.JsonObject.Add(System.String,System.Object)">
      <summary>
            Adds the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Facebook.JsonObject.ContainsKey(System.String)">
      <summary>
            Determines whether the specified key contains key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
      <ensures inheritedFrom="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" inheritedFromTypeName="IDictionary">!Contract.Result&lt;bool&gt;() || @this.Count &gt; 0</ensures>
    </member>
    <member name="M:Facebook.JsonObject.Remove(System.String)">
      <summary>
            Removes the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns />
    </member>
    <member name="M:Facebook.JsonObject.TryGetValue(System.String,System.Object@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns />
      <ensures inheritedFrom="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" inheritedFromTypeName="IDictionary">Contract.Result&lt;bool&gt;() == @this.ContainsKey(key)</ensures>
    </member>
    <member name="M:Facebook.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
            Adds the specified item.
            </summary>
      <param name="item">The item.</param>
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Add(`0)" inheritedFromTypeName="ICollection">this.Count &gt;= Contract.OldValue(this.Count)</ensures>
    </member>
    <member name="M:Facebook.JsonObject.Clear">
      <summary>
            Clears this instance.
            </summary>
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Clear" inheritedFromTypeName="ICollection">this.Count == 0</ensures>
    </member>
    <member name="M:Facebook.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
            Determines whether [contains] [the specified item].
            </summary>
      <param name="item">The item.</param>
      <returns>
        <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Contains(`0)" inheritedFromTypeName="ICollection">!Contract.Result&lt;bool&gt;() || this.Count &gt; 0</ensures>
    </member>
    <member name="M:Facebook.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>
            Copies to.
            </summary>
      <param name="array">The array.</param>
      <param name="arrayIndex">Index of the array.</param>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection">array != null</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection">arrayIndex &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection">arrayIndex + this.Count  &lt;= array.Length</requires>
    </member>
    <member name="M:Facebook.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
            Removes the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns />
    </member>
    <member name="M:Facebook.JsonObject.GetEnumerator">
      <summary>
            Gets the enumerator.
            </summary>
      <returns />
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&lt;T&gt;&gt;() != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&lt;T&gt;&gt;().Model == ((IEnumerable)this).Model</ensures>
    </member>
    <member name="M:Facebook.JsonObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&gt;() != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&gt;().Model == this.Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable">Contract.Result&lt;IEnumerator&gt;().CurrentIndex == -1</ensures>
    </member>
    <member name="M:Facebook.JsonObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
      <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Type returns the <see cref="T:System.String" /> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
      <param name="result">The result of the type conversion operation.</param>
      <returns>
            Alwasy returns true.
            </returns>
    </member>
    <member name="M:Facebook.JsonObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>
            Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.
            </summary>
      <param name="binder">Provides information about the deletion.</param>
      <returns>
            Alwasy returns true.
            </returns>
    </member>
    <member name="M:Facebook.JsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes" /> is equal to 3.</param>
      <param name="result">The result of the index operation.</param>
      <returns>
            Alwasy returns true.
            </returns>
    </member>
    <member name="M:Facebook.JsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
      <returns>
            Alwasy returns true.
            </returns>
    </member>
    <member name="M:Facebook.JsonObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
      <param name="binder">Provides information about the operation.</param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="indexes" /> is equal to 3.</param>
      <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
    </member>
    <member name="M:Facebook.JsonObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
    </member>
    <member name="M:Facebook.JsonObject.GetDynamicMemberNames">
      <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
      <returns>
            A sequence that contains dynamic member names.
            </returns>
    </member>
    <member name="P:Facebook.JsonObject.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:System.Object" /> at the specified index.
            </summary>
      <value />
    </member>
    <member name="P:Facebook.JsonObject.Keys">
      <summary>
            Gets the keys.
            </summary>
      <value>The keys.</value>
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.IDictionary`2.get_Keys" inheritedFromTypeName="IDictionary">Contract.Result&lt;ICollection&lt;TKey&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Facebook.JsonObject.Values">
      <summary>
            Gets the values.
            </summary>
      <value>The values.</value>
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.IDictionary`2.get_Values" inheritedFromTypeName="IDictionary">Contract.Result&lt;ICollection&lt;TValue&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Facebook.JsonObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:System.Object" /> with the specified key.
            </summary>
      <value />
    </member>
    <member name="P:Facebook.JsonObject.Count">
      <summary>
            Gets the count.
            </summary>
      <value>The count.</value>
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.get_Count" inheritedFromTypeName="ICollection">Contract.Result&lt;int&gt;() &gt;= 0</ensures>
      </getter>
    </member>
    <member name="P:Facebook.JsonObject.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Facebook.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Facebook.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Facebook.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Facebook.Properties.Resources.InvalidSignedRequest">
      <summary>
              Looks up a localized string similar to Invalid signed request..
            </summary>
    </member>
    <member name="T:Facebook.FacebookSession">
      <summary>
            Represents a Facebook session.
            </summary>
    </member>
    <member name="M:Facebook.FacebookSession.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookSession" /> class.
            </summary>
    </member>
    <member name="M:Facebook.FacebookSession.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Facebook.FacebookSession" /> class.
            </summary>
      <param name="accessToken">
            The access token.
            </param>
    </member>
    <member name="M:Facebook.FacebookSession.Create(System.String,Facebook.FacebookSignedRequest)">
      <summary>
            Creates a facebook session from a signed request.
            </summary>
      <param name="signedRequest">The signed request.</param>
      <returns>The facebook session.</returns>
    </member>
    <member name="M:Facebook.FacebookSession.Parse(System.String,System.String)">
      <summary>
            Parses the session value from a cookie.
            </summary>
      <param name="value">The session value.</param>
      <returns>The Facebook session object.</returns>
      <requires>!String.IsNullOrEmpty(appSecret)</requires>
      <requires>!String.IsNullOrEmpty(value)</requires>
      <requires description="Session value must not contain a comma.">!value.Contains(",")</requires>
    </member>
    <member name="M:Facebook.FacebookSession.GenerateSignature(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Generates a MD5 signature for the facebook session.
            </summary>
      <param name="session">The session to generate a signature.</param>
      <returns>An MD5 signature.</returns>
      <exception cref="T:System.ArgumentNullException">If the session is null.</exception>
      <exception cref="T:System.InvalidOperationException">If there is a problem generating the hash.</exception>
    </member>
    <member name="P:Facebook.FacebookSession.UserId">
      <summary>
            Gets or sets the user id.
            </summary>
      <value>The user id.</value>
    </member>
    <member name="P:Facebook.FacebookSession.Secret">
      <summary>
            Gets or sets the secret.
            </summary>
      <value>The secret.</value>
    </member>
    <member name="P:Facebook.FacebookSession.AccessToken">
      <summary>
            Gets or sets the access token.
            </summary>
      <value>The access token.</value>
    </member>
    <member name="P:Facebook.FacebookSession.SessionKey">
      <summary>
            Gets or sets the session key.
            </summary>
      <value>The session key.</value>
    </member>
    <member name="P:Facebook.FacebookSession.Expires">
      <summary>
            Gets or sets the expires.
            </summary>
      <value>The expires.</value>
    </member>
    <member name="P:Facebook.FacebookSession.Signature">
      <summary>
            Gets or sets the signature.
            </summary>
      <value>The signature.</value>
    </member>
    <member name="P:Facebook.FacebookSession.BaseDomain">
      <summary>
            Gets or sets the base domain.
            </summary>
      <value>The base domain.</value>
    </member>
    <member name="T:Facebook.FacebookSettings">
      <summary>
            Represents the settings of a Facebook application.
            </summary>
    </member>
    <member name="F:Facebook.FacebookSettings.current">
      <summary>
            The Facebook settings stored in the configuration file.
            </summary>
    </member>
    <member name="P:Facebook.FacebookSettings.Current">
      <summary>
            Gets the Facebook settings stored in the configuration file.
            </summary>
    </member>
    <member name="P:Facebook.FacebookSettings.AppSecret">
      <summary>
            Gets or sets the Application secret.
            </summary>
      <value>The Application secret.</value>
    </member>
    <member name="P:Facebook.FacebookSettings.AppId">
      <summary>
            Gets or sets the app id.
            </summary>
      <value>The app id.</value>
    </member>
    <member name="P:Facebook.FacebookSettings.MaxRetries">
      <summary>
            Gets or sets the max retries.
            </summary>
      <value>The max retries.</value>
    </member>
    <member name="P:Facebook.FacebookSettings.RetryDelay">
      <summary>
            Gets or sets the retry delay.
            </summary>
      <value>The retry delay.</value>
    </member>
    <member name="T:Facebook.HttpMethod">
      <summary>
            Represents an HTTP request type.
            </summary>
    </member>
    <member name="F:Facebook.HttpMethod.Get">
      <summary>
            A GET Request
            </summary>
    </member>
    <member name="F:Facebook.HttpMethod.Post">
      <summary>
            A POST Request
            </summary>
    </member>
    <member name="F:Facebook.HttpMethod.Delete">
      <summary>
            A DELETE Request
            </summary>
    </member>
    <member name="T:Facebook.DictionaryUtilities">
      <summary>
            Extension methods on Dicationry objects.
            </summary>
    </member>
    <member name="M:Facebook.DictionaryUtilities.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Merges two dictionaries.
            </summary>
      <param name="first">Default values, only used if second does not contain a value.</param>
      <param name="second">Every value of the merged object is used.</param>
      <returns>The merged dictionary</returns>
      <ensures>Contract.Result&lt;IDictionary&lt;string, object&gt;&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.DictionaryUtilities.ToJsonQueryString(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Converts the dictionary to a json formatted query string.
            </summary>
      <param name="dictionary">The dictionary.</param>
      <returns>A Json formatted querystring.</returns>
      <requires>dictionary != null</requires>
      <ensures>Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.DictionaryUtilities.ToJsonQueryString(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Converts the dictionary to a json formatted query string.
            </summary>
      <param name="dictionary">The dictionary.</param>
      <returns>A Json formatted querystring.</returns>
      <requires>dictionary != null</requires>
      <ensures>Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.DictionaryUtilities.ToJsonQueryString(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Converts the NameValueCollection to a json formatted query string.
            </summary>
      <param name="collection">The collection.</param>
      <returns>A Json formatted querystring.</returns>
      <requires>collection != null</requires>
      <ensures>Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="T:Facebook.UrlEncoder">
      <summary>
            A Facebook Uri encoding utility.
            </summary>
    </member>
    <member name="M:Facebook.UrlEncoder.EscapeUriString(System.String)">
      <summary>
            Converts a string to its escaped representation.
            </summary>
      <param name="stringToEscape">The string to escape.</param>
      <returns />
      <requires>!String.IsNullOrEmpty(stringToEscape)</requires>
    </member>
    <member name="M:Facebook.JsonObject.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object">Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.JsonSerializer.DeserializeObject(System.IO.Stream)">
      <requires>stream != null</requires>
    </member>
    <member name="M:Facebook.JsonArray.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object">Contract.Result&lt;string&gt;() != null</ensures>
    </member>
    <member name="M:Facebook.FacebookSession.ParseUserIdFromAccessToken(System.String)">
      <requires>!string.IsNullOrEmpty(accessToken)</requires>
    </member>
    <member name="M:Facebook.FacebookAppBase.Delete(System.String)">
      <requires>!String.IsNullOrEmpty(path)</requires>
    </member>
  </members>
</doc>